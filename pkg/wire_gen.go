// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package quadlek

import (
	"context"
	"github.com/jirwin/quadlek/pkg/bot"
	"github.com/jirwin/quadlek/pkg/data_store/boltdb"
	"github.com/jirwin/quadlek/pkg/plugin_manager"
	"github.com/jirwin/quadlek/pkg/slack"
	"github.com/jirwin/quadlek/pkg/uzap"
	"github.com/jirwin/quadlek/pkg/webhook_server"
)

// Injectors from wire.go:

func NewQuadlek(ctx context.Context) (*bot.QuadlekBot, error) {
	config, err := uzap.NewConfig()
	if err != nil {
		return nil, err
	}
	logger, err := uzap.New(config)
	if err != nil {
		return nil, err
	}
	slackConfig, err := slack.NewConfig()
	if err != nil {
		return nil, err
	}
	slackHttpClient := &slack.slackHttpClient{}
	slackClient, err := slack.NewSlackClient(slackConfig, slackHttpClient)
	if err != nil {
		return nil, err
	}
	plugin_managerConfig, err := plugin_manager.NewConfig()
	if err != nil {
		return nil, err
	}
	manager := &plugin_manager.Manager{
		C: plugin_managerConfig,
		L: logger,
	}
	webhook_serverConfig, err := webhook_server.NewConfig()
	if err != nil {
		return nil, err
	}
	server, err := webhook_server.New(webhook_serverConfig, logger, manager)
	if err != nil {
		return nil, err
	}
	botConfig, err := bot.NewConfig()
	if err != nil {
		return nil, err
	}
	boltdbConfig, err := boltdb.NewConfig()
	if err != nil {
		return nil, err
	}
	boltDbStore, err := boltdb.New(boltdbConfig, logger)
	if err != nil {
		return nil, err
	}
	quadlekBot := &bot.QuadlekBot{
		L:             logger,
		Slack:         slackClient,
		PluginManager: manager,
		WebhookServer: server,
		C:             botConfig,
		DataStore:     boltDbStore,
	}
	return quadlekBot, nil
}
